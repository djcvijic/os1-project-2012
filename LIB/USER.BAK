//===========================================================================//
//   Project: Projekat iz Operativnih sistema 1
//   File:    user.cpp
//   Date:    June 2012
//===========================================================================//
#include <iostream.h>
#include <stdlib.h>


#include "bounded.h"
#include "user.h"
#include "intLock.h"
#include "main.h"
#include "thread.h"


//---------------------------------------------------------------------------//
//  Ovo se menja u testu
//---------------------------------------------------------------------------//
int semPreempt = 0;

Time TIME_SLICE = 2;   // 0 ili defaultTimeSlice

int N = 16;            // 1 <= N <= 19

//---------------------------------------------------------------------------//

int theEnd=0;

class Producer : public Thread {
public:
	Producer (BoundedBuffer* bb, TName name, char y, Time time_slice);
	~Producer() {waitToComplete();}

protected:
	virtual void run ();
	char produce() {return x;}; // Produce an item

private:
	BoundedBuffer* myBuffer;
	char x;
};

TName consumerName = "consumer";

//---------------------------------------------------------------------------//
class Consumer : public Thread {
public:
	Consumer (BoundedBuffer* bb) : Thread(consumerName, defaultStackSize, 0), myBuffer(bb) {}
	~Consumer() {waitToComplete();}

protected:
	virtual void run ();
	void consume(char p); // Consume an item

private:
	BoundedBuffer* myBuffer;
};




//---------------------------------------------------------------------------//
// Korisnicki program mora obavezno da definise ovu f-ju
//---------------------------------------------------------------------------//
void tick(){

}

//---------------------------------------------------------------------------//

Producer::Producer (BoundedBuffer* bb, TName name, char y, Time time_slice) : Thread(name, defaultStackSize, time_slice), 
																						myBuffer(bb), x(y) {
																									//ne treba nista
																						}
		
void Producer::run () {
	int i;
	while(!theEnd) {
		char d = produce();
		myBuffer->append(d);
		for(i=0;i<1000;i++);
	}
}


//---------------------------------------------------------------------------//


void Consumer::consume(char p) {
	intLock
	cout<<p<<" ";
	intUnlock
} // Consume an item

void Consumer::run () {
		
	int i = 0, j;
	while(!theEnd) {
		char d = myBuffer->take();
		consume(d);
		if (i++ == 40) {
			sleep(92);
			i = 0;
		}else for(j=0;j<200;j++);
	}
   
	while (myBuffer->fullCount()){
		for(j=0;j<200;j++);
		char d = myBuffer->take();
		consume(d);
	}
	intLock
	cout<<endl<<"Happy End";
	intUnlock
}




/*
int userMain (int argc, char* argv[])
{
	TName producerName = "producerx";
	BoundedBuffer *buff;
	Consumer *con;
	intLock
	buff = new BoundedBuffer(atoi(argv[1]));
	N = atoi(argv[2]);
	N = N>19 ? 19 : N;
	TIME_SLICE = atoi(argv[3]);
	Producer **pro = new Producer*[N];
	int i;
	
	con = new Consumer(buff);
	  
	con->start();

	for (i=0; i<N; i++){
		producerName[8]='0'+i;
		pro[i] = new Producer(buff, producerName ,'0'+i, TIME_SLICE);
		pro[i]->start();
	}
  
	intUnlock
	
	
	intLock
	for (i=0; i<N; i++){
		delete pro[i];
	}  
	delete [] pro;
	delete con;

	cout<<"Kraj userMain"<<endl;
	intUnlock
	return 19 + argc - argc;
}
//---------------------------------------------------------------------------//
*/


void b(){

	for (int i =0; i < 5; ++i) {
			lock

			//begin lock
			lockCout;
			//end lock
			cout<<"u niti "<<PCB::running->getTName()<<", i = "<<i<<endl;
			//begin unlock
			unlockCout;
			//end unlock

			unlock
			for (int k = 0; k<20000; ++k)
				for (int j = 0; j <20000; ++j);
	}
	
	lockCout
	cout<<"uspavljuje se "<<PCB::running->getTName()<<" na 10 sekundi."<<endl;
	unlockCout
	
	Thread::sleep(180);
	
	lockCout
	cout<<"budi se "<<PCB::running->getTName()<<"."<<endl;
	unlockCout

	for (int ii =5; ii < 10; ++ii) {
			lock

			//begin lock
			lockCout;
			//end lock
			cout<<"u niti "<<PCB::running->getTName()<<", i = "<<ii<<endl;
			//begin unlock
			unlockCout;
			//end unlock

			unlock
			for (int k = 0; k<20000; ++k)
				for (int j = 0; j <20000; ++j);
	}
}

class ThreadB: public Thread{
	void run(){
		b();
	}
	public:
	ThreadB (TName name,StackSize stackSize,Time timeSlice):
		Thread(name,stackSize,timeSlice){}
};

int userMain(int argc, char* argv[]){
	lock

	const int numThreads = atoi(argv[2]);
	ThreadB **thr = new ThreadB * [numThreads];
	
	for (int n = 0; n < numThreads; n++){
		thr[n] = new ThreadB(NULL, defaultStackSize, atoi(argv[3]));
		thr[n]->start();
	}

	unlock

	/*for (int i = 0; i < 30; ++i) {
		lockCout
		cout<<"userMain "<<i<<endl;
		unlockCout

		for (int j = 0; j< 30000; ++j)
			for (int k = 0; k < 30000; ++k);
	}*/
	
	for (int i=0; i<numThreads; i++){
		delete thr[i];
	}  
	delete [] thr;
	
	lockCout
	cout<<"Happy End"<<endl;
	unlockCout

	return 19 + argc - argc;
}